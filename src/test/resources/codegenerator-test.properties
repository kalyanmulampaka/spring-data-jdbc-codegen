##
#  
# Copyright 2013
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
# 
# @author Kalyan Mulampaka
#
#
# Enable code generation. If false nothing will happen even if CodeGenerator.generate() is called
codegeneration.enabled=true
# Folder path where the code will be generated
src.folder.path=src/test/java
#
# DOMAIN CLASSES
#
# Package Name of the class and interfaces
# Generated domain class and interfaces will be created with the following package name and folder structure
domain.package.name=com.generated.code.domain
# Generate jsr-303 validation annotations
generate.jsr303.annotations=true
# Insert, Update groups for jsr303 annotations
insert.group.class=javax.validation.groups.Default
update.group.class=javax.validation.groups.Default
#Generate foreign key reference objects
generate.fkey.references=true
# Ignore the following foreign keys
ignore.fkeys=
#
# REPOSITORY CLASSES
#
# Generated Repository helper class and interfaces will be created with the following package name and folder structure
repository.db.package.name=com.generated.code.repository.db
# Repository package name
repository.package.name=com.generated.code.repository
#
# following tables will be ignored during code generation, comma separated table names or patterns e,g qrtz*  or *queue
ignore.tablelist=
# following columns will be ignored during code generation
ignore.columnlist=

# following tables will be created during code generation, comma separated table names or patterns e,g qrtz*  or *queue
only.tablelist=ORDCOL, ORDRE


# Parent - Child relations. create child objects in parent object based on the relationship
# relationship has to be in this format: ParentTableName:ChildTableName:OneToMany multiple sets should be comma separated
# this creates the structure as follows:
# ParentDomainClass: Field List<ChildDomainClass> children will be created in parent domain class to represent the relationship.
# Repository class: A method to get the list of child rows by parent id will be created in the Child Repository class.
# Db class: Alias Mapper in the Parent Db class will call the above method to set the list of child objects.
parent.child.relations=
#
# DATABASE CONFIGURATION
#
# Postgres
#jdbc.driverClassName=org.postgresql.Driver
#jdbc.url=jdbc:postgresql://localhost:5432/codegen
#jdbc.username=postgres
#jdbc.password=postgres
# MySql
#jdbc.driverClassName=com.mysql.jdbc.Driver
#jdbc.url=jdbc:mysql://localhost/codegen
#jdbc.username=admin
#jdbc.password=password


# MSSQLSERVER
# MSSQLSERVER
jdbc.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
jdbc.url=jdbc:sqlserver://localhost:1433;databaseName=codegen
jdbc.username=admin
jdbc.password=password